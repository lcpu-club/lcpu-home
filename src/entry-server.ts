// https://github.com/vitejs/vite-plugin-vue/blob/main/playground/ssr-vue/src/entry-server.js

import { basename } from 'path'
import { renderToString, type SSRContext } from 'vue/server-renderer'
import { createApp } from './main'
import { SiteConfiguration } from './site'
import { indexPageRe } from './utils'

export async function render(url: string, manifest: { [key: string]: string[] }) {
  const { app, router } = createApp()

  // set the router to the desired URL before rendering
  await router.go(url)

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: SSRContext = {}
  const html = await renderToString(app, ctx)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  const meta = renderMeta(ctx.meta, ctx.titlePrefix, url, ctx.author, ctx.time)
  return [html, preloadLinks, ctx.titlePrefix ?? '', meta]
}

function renderPreloadLinks(modules: Set<string>, manifest: { [key: string]: string[] }) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          const filename = basename(file)
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile)
              seen.add(depFile)
            }
          }
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file: string) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`
  } else {
    return ''
  }
}

function renderMeta(
  meta: { [key: string]: string | string[] },
  title: string,
  url: string,
  author: string,
  time: string,
): string {
  if (!meta) return ''
  let result = ''
  for (const key in meta) {
    if (!meta[key]) continue
    switch (key) {
      case 'description':
        result += `<meta property="og:description" content="${meta[key]}"><meta name="twitter:description" content="${meta[key]}"><meta name="${key}" content="${meta[key]}">`
        break
      case 'keywords':
        result += `<meta name="keywords" content="${(meta[key] as string[]).join(',')}">`
        break
      case 'image':
        result += `<meta name="twitter:image" content="${meta[key]}"><meta property="og:image" content="${meta[key]}">`
        break
      case 'video':
        result += `<meta property="og:video" content="${meta[key]}">`
    }
  }
  if (title) {
    result += `<meta name="title" content="${title}"><meta property="og:title" content="${title}"><meta name="twitter:title" content="${title}">`
  }
  if (author !== undefined && author !== '') {
    result += `<meta name="author" content="${author}">`
  } else {
    result += `<meta name="author" content="北京大学学生 Linux 俱乐部">`
  }
  result += `<link rel="canonical" href="https://lcpu.dev${url}"><meta property="og:url" content="https://lcpu.dev${url}"><meta property="og:site_name" content="北京大学学生 Linux 俱乐部" />`

  const slugs = url.substring(1).split('/')
  const BreadcrumbList = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      {
        '@type': 'ListItem',
        item: 'https://lcpu.dev/',
        name: '北京大学学生 Linux 俱乐部',
        position: 1,
      },
    ],
  }
  let count = 1
  slugs.forEach((slug) => {
    if (slug === '') {
      return
    }
    count++
    const category = SiteConfiguration.getRouteCategoryTitle(slug)
    BreadcrumbList['itemListElement'].push({
      '@type': 'ListItem',
      item: `${BreadcrumbList['itemListElement'][count - 2]["item"]}${slug}/`,
      name: (category === undefined || category === slug) ? title : category,
      position: count,
    })
  })
  result += `<script type="application/ld+json">${JSON.stringify(BreadcrumbList)}</script>`

  if (url === '/') {
    const jsonLd = {
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      '@id': 'https://lcpu.dev/',
      name: '北京大学学生 Linux 俱乐部',
      description: "${meta['description']}",
      inLanguage: 'zh-Hans',
      url: 'https://lcpu.dev/',
      keywords: meta['keywords'],
      publisher: { '@type': 'Organization', name: '北京大学学生 Linux 俱乐部', url: "https://lcpu.dev" },
      image: "https://lcpu.dev/favicon.svg",
    }
    result += `<script type="application/ld+json">${JSON.stringify(
      jsonLd,
    )}</script><meta property="og:type" content="website"><meta name="twitter:card" content="summary">`
  } else if (
    !url.match(indexPageRe) &&
    url != '/404.html' &&
    url != '/announcements/test/' &&
    url != '/about/'
  ) {
    const dateObj = new Date(time)
    const dateIsoString = dateObj.toISOString()
    let sectionName
    if (url.substring(1).split('/')[0] !== '') {
      sectionName = SiteConfiguration.getRouteCategoryTitle(url.substring(1).split('/')[0])
    }
    const jsonLd = {
      '@context': 'https://schema.org',
      '@type': 'Article',
      articleSection: sectionName,
      name: title,
      headline: meta['description'],
      description: meta['description'],
      abstract: meta['description'],
      inLanguage: 'zh-Hans',
      url: `https://lcpu.dev${url}`,
      author:
        author !== ''
          ? { '@type': 'Person', name: author }
          : { '@type': 'Organization', name: '北京大学学生 Linux 俱乐部', url: "https://lcpu.dev" },
      copyrightYear: dateObj.getFullYear(),
      dateCreated: dateIsoString,
      datePublished: dateIsoString,
      keywords: meta.keywords,
      mainEntityOfPage: 'true',
      image: meta.image ? meta.image : "https://lcpu.dev/favicon.svg"
    }

    result += `<meta property="og:type" content="article"><meta name="twitter:card" content="summary_large_image"><meta property="article:published_time" content="${dateIsoString}"><meta property="article:modified_time" content="${dateIsoString}"><script type="application/ld+json">${JSON.stringify(
      jsonLd,
    )}</script>
`
  }
  return result
}
