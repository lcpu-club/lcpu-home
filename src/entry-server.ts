// https://github.com/vitejs/vite-plugin-vue/blob/main/playground/ssr-vue/src/entry-server.js

import { basename } from 'path'
import { renderToString, type SSRContext } from 'vue/server-renderer'
import { createApp } from './main'
import { SiteConfiguration, RouteTitleRecord } from './site'

export async function render(url: string, manifest: { [key: string]: string[] }) {
  const { app, router } = createApp()

  // set the router to the desired URL before rendering
  await router.go(url)

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: SSRContext = {}
  const html = await renderToString(app, ctx)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  const meta = renderMeta(ctx, url)
  return [html, preloadLinks, ctx.titlePrefix ?? '', meta]
}

function renderPreloadLinks(modules: Set<string>, manifest: { [key: string]: string[] }) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          const filename = basename(file)
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile)
              seen.add(depFile)
            }
          }
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file: string) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="https://img.lcpu.dev${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="https://img.lcpu.dev${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="https://img.lcpu.dev${file}" as="image" type="image/png">`
  } else {
    return ''
  }
}

function renderMeta(ctx: SSRContext, url: string): string {
  const meta = ctx.meta
  const title = ctx.titlePrefix || '北京大学学生 Linux 俱乐部'
  const author = ctx.author
  const time = ctx.time
  const sourceUrl = ctx.sourceUrl

  const results: string[] = []

  results.push(
    `<meta name="title" content="${title}">`,
    `<meta property="og:title" content="${title}">`,
    `<meta name="twitter:title" content="${title}">`,
  )

  if (author) {
    results.push(`<meta name="author" content="${author}">`)
  } else {
    results.push(`<meta name="author" content="北京大学学生 Linux 俱乐部">`)
  }

  results.push(
    `<link rel="canonical" href="https://lcpu.dev${url}">`,
    `<meta property="og:url" content="https://lcpu.dev${url}">`,
  )

  if (meta['description']) {
    results.push(
      `<meta property="og:description" content="${meta['description']}">`,
      `<meta name="twitter:description" content="${meta['description']}">`,
      `<meta name="${'description'}" content="${meta['description']}">`,
    )
  }
  if (meta['keywords']) {
    results.push(`<meta name="keywords" content="${(meta['keywords'] as string[]).join(',')}">`)
  }
  if (meta['image']) {
    results.push(
      `<meta name="twitter:image" content="${meta['image']}">`,
      `<meta property="og:image" content="${meta['image']}">`,
    )
  } else {
    results.push(
      `<meta name="twitter:image" content="https://lcpu.dev/favicon.svg">`,
      `<meta property="og:image" content="https://lcpu.dev/favicon.svg">`,
    )
  }
  if (meta['video']) {
    results.push(`<meta property="og:video" content="${meta['video']}">`)
  }

  const slugs = url.substring(1).split('/')
  const BreadcrumbList = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      {
        '@type': 'ListItem',
        item: 'https://lcpu.dev/',
        name: '北京大学学生 Linux 俱乐部',
        position: 1,
      },
    ],
  }
  let count = 1
  slugs.forEach((slug) => {
    if (slug === '') {
      return
    }
    count++
    const category = SiteConfiguration.getRouteCategoryTitle(slug)
    BreadcrumbList['itemListElement'].push({
      '@type': 'ListItem',
      item: `${BreadcrumbList['itemListElement'][count - 2]['item']}${slug}/`,
      name: category === undefined || category === slug ? title : category,
      position: count,
    })
  })
  if (url === '/404.html') {
    BreadcrumbList['itemListElement'][1].item = 'https://lcpu.dev/404.html'
    results.push(`<meta name="robots" content="noindex">`)
  }

  results.push(`<script type="application/ld+json">${JSON.stringify(BreadcrumbList)}</script>`)

  if (url === '/') {
    const jsonLd = {
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      '@id': 'https://lcpu.dev/',
      name: '北京大学学生 Linux 俱乐部',
      description: `${meta['description']}`,
      inLanguage: 'zh-Hans',
      url: 'https://lcpu.dev/',
      keywords: meta['keywords'],
      publisher: {
        '@type': 'Organization',
        name: '北京大学学生 Linux 俱乐部',
        url: 'https://lcpu.dev/',
      },
      image: 'https://lcpu.dev/favicon.svg',
    }
    results.push(
      `<script type="application/ld+json">${JSON.stringify(jsonLd)}</script>`,
      `<meta property="og:type" content="website">`,
      `<meta name="twitter:card" content="summary">`,
      `<link rel="alternate" type="application/atom+xml" href="/posts.atom" title="北京大学学生 Linux 俱乐部" />`,
      ...Object.keys(RouteTitleRecord).map(
        (routeBase) =>
          `<link rel="alternate" type="application/atom+xml" href="/${routeBase}/posts.atom" title="${RouteTitleRecord[routeBase]} | 北京大学学生 Linux 俱乐部" />`,
      ),
    )
  } else if (sourceUrl && url != '/404.html') {
    const jsonLd: Record<string, string | object | number | undefined> = {
      '@context': 'https://schema.org',
      '@type': 'Article',
      name: title,
      inLanguage: 'zh-Hans',
      url: `https://lcpu.dev${url}`,
      author: author
        ? { '@type': 'Person', name: author }
        : { '@type': 'Organization', name: '北京大学学生 Linux 俱乐部', url: 'https://lcpu.dev/' },
      description: meta['description'] || undefined,
      headline: meta['headline'] || undefined,
      abstract: meta['abstract'] || undefined,
      keywords: meta['keywords'] || undefined,
      image: meta['image'] || 'https://lcpu.dev/favicon.svg',
    }
    if (time) {
      const dateObj = new Date(time)
      const dateIsoString = dateObj.toISOString()
      jsonLd['copyrightYear'] = dateObj.getFullYear()
      jsonLd['dateCreated'] = dateIsoString
      jsonLd['datePublished'] = dateIsoString
      results.push(
        `<meta property="article:published_time" content="${dateIsoString}">`,
        `<meta property="article:modified_time" content="${dateIsoString}">`,
      )
    }

    if (url.substring(1).split('/')[0] !== '') {
      jsonLd['articleSection'] =
        SiteConfiguration.getRouteCategoryTitle(url.substring(1).split('/')[0]) || undefined
    }

    results.push(
      '<meta property="og:type" content="article">',
      '<meta name="twitter:card" content="summary_large_image">',
      `<script type="application/ld+json">${JSON.stringify(jsonLd)}</script>`,
    )
  } else if (slugs[0] in RouteTitleRecord) {
    results.push(
      `<link rel="alternate" type="application/atom+xml" href="/${slugs[0]}/posts.atom" title="${RouteTitleRecord[slugs[0]]} | 北京大学学生 Linux 俱乐部" />`,
    )
  }
  return results.join('\n')
}
